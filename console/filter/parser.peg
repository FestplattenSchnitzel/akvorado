{
  // SPDX-FileCopyrightText: 2022 Free Mobile
  // SPDX-License-Identifier: AGPL-3.0-only

  package filter

  import (
    "fmt"
    "net"

    "akvorado/common/helpers"
  )
}

Input ← _ expr:Expr _ EOF {
  meta := c.globalStore["meta"].(*Meta)
  _, ok := c.state["main-table-only"]
  meta.MainTableRequired = ok
  return expr, nil
}

Expr "expression" ← head:(SubExpr / NotExpr / ConditionExpr) rest:( _ ( KW_AND / KW_OR ) _ Expr )* {
  expr := []string{head.(string)}
  for _, e := range toSlice(rest) {
    rest := toSlice(e)
    expr = append(expr, fmt.Sprintf("%s %s", strings.ToUpper(toString(rest[1])), toString(rest[3])));
  }
  return strings.Join(expr, " "), nil
}
SubExpr "sub-expression" ← '(' _ expr:Expr _ ')' {
  return fmt.Sprintf("(%s)", toString(expr)), nil
}
NotExpr "NOT expression" ← KW_NOT _ expr:Expr {
  return fmt.Sprintf("NOT %s", toString(expr)), nil
}

ConditionExpr "conditional" ←
    ConditionIPExpr
  / ConditionStringExpr
  / ConditionBoundaryExpr
  / ConditionSpeedExpr
  / ConditionForwardingStatusExpr
  / ConditionPortExpr
  / ConditionASExpr
  / ConditionASPathExpr
  / ConditionETypeExpr
  / ConditionProtoExpr
  / ConditionPacketSizeExpr

ColumnIP ←
   "ExporterAddress"i { return "ExporterAddress", nil }
 / "SrcAddr"i #{ c.state["main-table-only"] = true ; return nil }
               { return c.reverseColumnDirection("SrcAddr"), nil }
 / "DstAddr"i #{ c.state["main-table-only"] = true ; return nil }
               { return c.reverseColumnDirection("DstAddr"), nil }
ConditionIPExpr "condition on IP" ←
   column:ColumnIP _
   operator:("=" / "!=") _ ip:IP {
     return fmt.Sprintf("%s %s toIPv6(%s)", toString(column), toString(operator), quote(ip)), nil
   }
 / column:ColumnIP _
   operator:"<<" _ subnet:Subnet {
     return fmt.Sprintf("%s %s", toString(column), subnet), nil
   }
 / column:ColumnIP _
   operator:"!<<" _ subnet:Subnet {
     return fmt.Sprintf("%s NOT %s", toString(column), subnet), nil
   }

ConditionStringExpr "condition on string" ←
 column:("ExporterName"i { return "ExporterName", nil }
      / "ExporterGroup"i { return "ExporterGroup", nil }
      / "ExporterRole"i { return "ExporterRole", nil }
      / "ExporterSite"i { return "ExporterSite", nil }
      / "ExporterRegion"i { return "ExporterRegion", nil }
      / "ExporterTenant"i { return "ExporterTenant", nil }
      / "SrcCountry"i { return c.reverseColumnDirection("SrcCountry"), nil }
      / "DstCountry"i { return c.reverseColumnDirection("DstCountry"), nil }
      / "SrcNetName"i { return c.reverseColumnDirection("SrcNetName"), nil }
      / "DstNetName"i { return c.reverseColumnDirection("DstNetName"), nil }
      / "SrcNetRole"i { return c.reverseColumnDirection("SrcNetRole"), nil }
      / "DstNetRole"i { return c.reverseColumnDirection("DstNetRole"), nil }
      / "SrcNetSite"i { return c.reverseColumnDirection("SrcNetSite"), nil }
      / "DstNetSite"i { return c.reverseColumnDirection("DstNetSite"), nil }
      / "SrcNetRegion"i { return c.reverseColumnDirection("SrcNetRegion"), nil }
      / "DstNetRegion"i { return c.reverseColumnDirection("DstNetRegion"), nil }
      / "SrcNetTenant"i { return c.reverseColumnDirection("SrcNetTenant"), nil }
      / "DstNetTenant"i { return c.reverseColumnDirection("DstNetTenant"), nil }
      / "InIfName"i { return c.reverseColumnDirection("InIfName"), nil }
      / "OutIfName"i { return c.reverseColumnDirection("OutIfName"), nil }
      / "InIfDescription"i { return c.reverseColumnDirection("InIfDescription"), nil }
      / "OutIfDescription"i { return c.reverseColumnDirection("OutIfDescription"), nil }
      / "InIfConnectivity"i { return c.reverseColumnDirection("InIfConnectivity"), nil }
      / "OutIfConnectivity"i { return c.reverseColumnDirection("OutIfConnectivity"), nil }
      / "InIfProvider"i { return c.reverseColumnDirection("InIfProvider"), nil }
      / "OutIfProvider"i { return c.reverseColumnDirection("OutIfProvider"), nil }) _
 rcond:RConditionStringExpr {
  return fmt.Sprintf("%s %s", toString(column), toString(rcond)), nil
}
RConditionStringExpr "condition on string" ←
   operator:("=" / "!=" / LikeOperator ) _ str:StringLiteral {
     return fmt.Sprintf("%s %s", toString(operator), quote(str)), nil
   }
 / operator:InOperator _ '(' _ value:ListString _ ')' {
  return fmt.Sprintf("%s (%s)", toString(operator), toString(value)), nil
   }

ConditionBoundaryExpr "condition on boundary" ←
 column:("InIfBoundary"i { return c.reverseColumnDirection("InIfBoundary"), nil }
      / "OutIfBoundary"i { return c.reverseColumnDirection("OutIfBoundary"), nil }) _
 operator:("=" / "!=") _
 boundary:("external"i / "internal"i / "undefined"i) {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator),
                     quote(strings.ToLower(toString(boundary)))), nil
}
ConditionSpeedExpr "condition on speed" ←
 column:("InIfSpeed"i { return c.reverseColumnDirection("InIfSpeed"), nil }
      / "OutIfSpeed"i { return c.reverseColumnDirection("OutIfSpeed"), nil }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _
 value:Unsigned64 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}
ConditionForwardingStatusExpr "condition on forwarding status" ←
 column:("ForwardingStatus"i { return "ForwardingStatus", nil }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _
 value:Unsigned8 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}
ConditionPortExpr "condition on port" ←
 column:("SrcPort"i #{ c.state["main-table-only"] = true ; return nil } { return c.reverseColumnDirection("SrcPort"), nil }
       / "DstPort"i #{ c.state["main-table-only"] = true ; return nil } { return c.reverseColumnDirection("DstPort"), nil }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned16 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}

ConditionASExpr "condition on AS number" ←
 column:("SrcAS"i { return c.reverseColumnDirection("SrcAS"), nil }
       / "DstAS"i { return c.reverseColumnDirection("DstAS"), nil }
       / "Dst1stAS"i { return c.reverseColumnDirection("Dst1stAS"), nil }
       / "Dst2ndAS"i { return c.reverseColumnDirection("Dst2ndAS"), nil }
       / "Dst3rdAS"i { return c.reverseColumnDirection("Dst3rdAS"), nil }) _
 rcond:RConditionASExpr {
  return fmt.Sprintf("%s %s", toString(column), toString(rcond)), nil
}
RConditionASExpr "condition on AS number" ←
   operator:("=" / "!=") _ value:ASN { return fmt.Sprintf("%s %s", toString(operator), toString(value)), nil }
 / operator:InOperator _ '(' _ value:ListASN _ ')' {
  return fmt.Sprintf("%s (%s)", toString(operator), toString(value)), nil
}

ConditionASPathExpr "condition on AS path" ←
  column:("DstASPath"i { return "DstASPath", nil }) _
  KW_HAS  _ value:ASN { return fmt.Sprintf("has(%s, %s)", toString(column), toString(value)), nil }
/ column:("DstASPath"i { return "DstASPath", nil }) _
  KW_HASNOT  _ value:ASN { return fmt.Sprintf("NOT has(%s, %s)", toString(column), toString(value)), nil }

ConditionETypeExpr "condition on Ethernet type" ←
 column:("EType"i { return "EType", nil }) _
 operator:("=" / "!=") _ value:("IPv4"i / "IPv6"i) {
  etypes := map[string]uint16{
    "ipv4": helpers.ETypeIPv4,
    "ipv6": helpers.ETypeIPv6,
   }
   etype := etypes[strings.ToLower(toString(value))]
   return fmt.Sprintf("%s %s %d", toString(column), toString(operator), etype), nil
}
ConditionProtoExpr "condition on protocol" ← ConditionProtoIntExpr / ConditionProtoStrExpr
ConditionProtoIntExpr "condition on protocol as integer" ←
 column:("Proto"i { return "Proto", nil }) _
 operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned8 {
  return fmt.Sprintf("%s %s %s", toString(column), toString(operator), toString(value)), nil
}
ConditionProtoStrExpr "condition on protocol as string" ←
 column:("Proto"i { return "Proto", nil }) _
 operator:("=" / "!=") _ value:StringLiteral {
  return fmt.Sprintf("dictGetOrDefault('protocols', 'name', %s, '???') %s %s", toString(column), toString(operator), quote(value)), nil
}
ConditionPacketSizeExpr "condition on packet size" ←
 "PacketSize"i _ operator:("=" / ">=" / "<=" / "<" / ">" / "!=") _ value:Unsigned16 {
  return fmt.Sprintf("Bytes/Packets %s %s", toString(operator), toString(value)), nil
}

IP "IP address" ← [0-9A-Fa-f:.]+ !IdentStart {
  ip := net.ParseIP(string(c.text))
  if ip == nil {
    return false, fmt.Errorf("expecting an IP address")
  }
  return ip.String(), nil
}

Subnet "IP subnet" ← [0-9A-Fa-f:.]+ "/" [0-9]+ !IdentStart {
  _, net, err := net.ParseCIDR(string(c.text))
  if err != nil {
    return false, fmt.Errorf("expecting a subnet")
  }
  if net.IP.To4() == nil {
    return fmt.Sprintf("BETWEEN toIPv6('%s') AND toIPv6('%s')", net.IP.String(), lastIP(net).String()), nil
  }
  return fmt.Sprintf("BETWEEN toIPv6('::ffff:%s') AND toIPv6('::ffff:%s')", net.IP.String(), lastIP(net).String()), nil
}

ASN "AS number" ← "AS"i? value:Unsigned32 {
  return value, nil
}
ListASN "list of AS numbers" ←
   head:ASN _ ',' _ tail:ListASN { return fmt.Sprintf("%s, %s", head, tail), nil }
 / value:ASN { return value, nil }

StringLiteral "quoted string" ← ( '"' DoubleStringChar* '"' / "'" SingleStringChar* "'" ) {
    return string(c.text[1:len(c.text)-1]), nil
} / ( ( '"' DoubleStringChar* ( EOL / EOF ) ) / ( "'" SingleStringChar* ( EOL / EOF ) ) ) {
    return "", errors.New("string literal not terminated")
}
SourceChar ← .
DoubleStringChar ← !( '"' / EOL ) SourceChar
SingleStringChar ← !( "'" / EOL ) SourceChar
ListString "list of strings" ←
   head:StringLiteral _ ',' _ tail:ListString { return fmt.Sprintf("%s, %s", quote(head), tail), nil }
 / value:StringLiteral { return quote(value), nil }

Unsigned8 "unsigned 8-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 8)
  if err != nil {
    return "", errors.New("expecting an unsigned 8-bit integer")
  }
  return fmt.Sprintf("%d", v), nil
}

Unsigned16 "unsigned 16-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 16)
  if err != nil {
    return "", errors.New("expecting an unsigned 16-bit integer")
  }
  return fmt.Sprintf("%d", v), nil
}

Unsigned32 "unsigned 32-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 32)
  if err != nil {
    return "", errors.New("expecting an unsigned 32-bit integer")
  }
  return fmt.Sprintf("%d", v), nil
}

Unsigned64 "unsigned 64-bit integer" ← [0-9]+ !IdentStart {
  v, err := strconv.ParseUint(string(c.text), 10, 64)
  if err != nil {
    return "", errors.New("expecting an unsigned 64-bit integer")
  }
  return fmt.Sprintf("%d", v), nil
}

LikeOperator "LIKE operators" ←
   KW_LIKE
 / KW_ILIKE
 / KW_UNLIKE
 / KW_IUNLIKE
InOperator "IN operators" ←
   KW_IN
 / KW_NOTIN
KW_AND "AND operator" ← "AND"i !IdentStart { return "AND", nil }
KW_OR "OR operator" ← "OR"i  !IdentStart { return "OR", nil }
KW_NOT "NOT operator" ← "NOT"i !IdentStart { return "NOT", nil }
KW_LIKE "LIKE operator" ← "LIKE"i !IdentStart { return "LIKE", nil }
KW_ILIKE "ILIKE operator" ← "ILIKE"i !IdentStart { return "ILIKE", nil }
KW_IN "IN operator" ← "IN"i !IdentStart { return "IN", nil }
KW_UNLIKE "UNLIKE operator" ← "UNLIKE"i !IdentStart { return "NOT LIKE", nil }
KW_IUNLIKE "IUNLIKE operator" ← "IUNLIKE"i !IdentStart { return "NOT ILIKE", nil }
KW_NOTIN "NOTIN operator" ← "NOTIN"i !IdentStart { return "NOT IN", nil }
KW_HAS "HAS operator" ← "HAS"i !IdentStart
KW_HASNOT "HASNOT operator" ← "HASNOT"i !IdentStart

SingleLineComment "comment" ← "--" ( !EOL SourceChar )*
MultiLineComment ← "/*" ( !"*/" SourceChar )* ("*/" / EOF {
  return "", errors.New("comment unclosed")
})
IdentStart ← [A-Za-z_]
_ "whitespace" ← ([ \n\r\t] / SingleLineComment / MultiLineComment)*
EOF ← !.
EOL ← '\n'
